---

- name: Install required packages
  dnf:
    name:
      - wget
      - tar
      - openssl
    state: present

- name: Create etcd user
  user:
    name: etcd
    system: yes
    shell: /sbin/nologin
    create_home: no

- name: Create etcd directories
  file:
    path: "{{ item }}"
    state: directory
    owner: etcd
    group: etcd
    mode: '0755'
  loop:
    - /etc/etcd
    - /var/lib/etcd
    - /var/lib/etcd/wal
    - /etc/ssl/etcd

- name: Clean existing etcd data if present (for fresh cluster setup)
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - /var/lib/etcd/member
    - /var/lib/etcd/wal
    - /var/lib/etcd/default.etcd
  when: etcd_initial_cluster_state == "new"

- name: Recreate WAL directory after cleanup
  file:
    path: /var/lib/etcd/wal
    state: directory
    owner: etcd
    group: etcd
    mode: '0700'
  when: etcd_initial_cluster_state == "new"

- name: Download etcd binary
  get_url:
    url: "{{ etcd_download_url }}"
    dest: /tmp/etcd-v{{ etcd_version }}-linux-amd64.tar.gz
    mode: '0644'

- name: Extract etcd binary
  unarchive:
    src: /tmp/etcd-v{{ etcd_version }}-linux-amd64.tar.gz
    dest: /tmp/
    remote_src: yes

- name: Install etcd binaries
  copy:
    src: "/tmp/etcd-v{{ etcd_version }}-linux-amd64/{{ item }}"
    dest: "/usr/local/bin/{{ item }}"
    mode: '0755'
    remote_src: yes
  loop:
    - etcd
    - etcdctl

- name: Generate CA certificate
  command: >
    openssl req -new -x509 -days 3650 -nodes
    -keyout /home/ec2-user/etcd-ca.key
    -out /home/ec2-user/etcd-ca.crt
    -subj "/CN=etcd-ca"
  delegate_to: localhost
  run_once: true
  args:
    creates: /home/ec2-user/etcd-ca.crt

- name: Ensure CA key readable on controller during distribution
  file:
    path: /home/ec2-user/etcd-ca.key
    mode: '0644'
  delegate_to: localhost
  run_once: true

- name: Copy CA certificate to etcd nodes
  copy:
    src: /home/ec2-user/etcd-ca.crt
    dest: /etc/ssl/etcd/ca.crt
    mode: '0644'

- name: Copy CA key to etcd nodes
  copy:
    src: /home/ec2-user/etcd-ca.key
    dest: /etc/ssl/etcd/ca.key
    mode: '0600'

- name: Secure CA key on controller after distribution
  file:
    path: /home/ec2-user/etcd-ca.key
    mode: '0600'
  delegate_to: localhost
  run_once: true

- name: Generate server certificate
  command: >
    openssl req -new -nodes
    -keyout /etc/ssl/etcd/server.key
    -out /etc/ssl/etcd/server.csr
    -subj "/CN={{ inventory_hostname }}"
  args:
    creates: /etc/ssl/etcd/server.key

- name: Create server certificate extensions file
  copy:
    content: |
      subjectAltName = DNS:{{ inventory_hostname }},DNS:localhost,IP:{{ ansible_host }},IP:127.0.0.1{% if hostvars.get('lb') and hostvars['lb'].get('ansible_host') %},IP:{{ hostvars['lb'].ansible_host }}{% endif %}
    dest: /etc/ssl/etcd/server.ext

- name: Sign server certificate
  command: >
    openssl x509 -req -days 3650
    -in /etc/ssl/etcd/server.csr
    -CA /etc/ssl/etcd/ca.crt
    -CAkey /etc/ssl/etcd/ca.key
    -CAcreateserial
    -out /etc/ssl/etcd/server.crt
    -extfile /etc/ssl/etcd/server.ext
  args:
    creates: /etc/ssl/etcd/server.crt

- name: Generate peer certificate
  command: >
    openssl req -new -nodes
    -keyout /etc/ssl/etcd/peer.key
    -out /etc/ssl/etcd/peer.csr
    -subj "/CN={{ inventory_hostname }}"
  args:
    creates: /etc/ssl/etcd/peer.key

- name: Create peer certificate extensions file
  copy:
    content: |
      subjectAltName = DNS:{{ inventory_hostname }},DNS:localhost,IP:{{ ansible_host }},IP:127.0.0.1{% if hostvars.get('lb') and hostvars['lb'].get('ansible_host') %},IP:{{ hostvars['lb'].ansible_host }}{% endif %}
    dest: /etc/ssl/etcd/peer.ext

- name: Sign peer certificate
  command: >
    openssl x509 -req -days 3650
    -in /etc/ssl/etcd/peer.csr
    -CA /etc/ssl/etcd/ca.crt
    -CAkey /etc/ssl/etcd/ca.key
    -CAcreateserial
    -out /etc/ssl/etcd/peer.crt
    -extfile /etc/ssl/etcd/peer.ext
  args:
    creates: /etc/ssl/etcd/peer.crt

- name: Set certificate permissions
  file:
    path: "{{ item }}"
    owner: etcd
    group: etcd
    mode: '0600'
  loop:
    - /etc/ssl/etcd/ca.key
    - /etc/ssl/etcd/server.key
    - /etc/ssl/etcd/peer.key

- name: Set certificate permissions (readable)
  file:
    path: "{{ item }}"
    owner: etcd
    group: etcd
    mode: '0644'
  loop:
    - /etc/ssl/etcd/ca.crt
    - /etc/ssl/etcd/server.crt
    - /etc/ssl/etcd/peer.crt

- name: Deploy etcd configuration
  template:
    src: etcd.conf.j2
    dest: /etc/etcd/etcd.conf
    owner: etcd
    group: etcd
    mode: '0644'
  notify: Restart etcd

- name: Deploy systemd service
  template:
    src: etcd.service.j2
    dest: /etc/systemd/system/etcd.service
    mode: '0644'
  notify: Restart etcd

- name: Ensure etcd service is enabled and started
  systemd:
    name: etcd
    state: started
    enabled: yes
    daemon_reload: yes

- name: Wait for etcd to be ready
  wait_for:
    host: "{{ ansible_host }}"
    port: 2379
    timeout: 60

- name: Verify etcd cluster health
  command: >
    /usr/local/bin/etcdctl --endpoints=https://{{ ansible_host }}:2379
    --cacert=/etc/ssl/etcd/ca.crt
    --cert=/etc/ssl/etcd/server.crt
    --key=/etc/ssl/etcd/server.key
    endpoint health
  register: etcd_health
  changed_when: false
  retries: 5
  delay: 5
  until: etcd_health.rc == 0
