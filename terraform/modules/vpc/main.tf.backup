locals {
  name_prefix = "${var.project_name}-${var.environment}"
}

# VPC
resource "aws_vpc" "keubernetes_vpc" {
  cidr_block           = var.vpc_cidr
  enable_dns_hostnames = true
  enable_dns_support   = true

  tags = merge(var.tags, {
    Name = "${local.name_prefix}-vpc"
  })
}

# Public Subnet in us-east-1a
resource "aws_subnet" "public_1a" {
  vpc_id                  = aws_vpc.keubernetes_vpc.id
  cidr_block              = "10.0.1.0/24"
  availability_zone       = "us-east-1a"
  map_public_ip_on_launch = true

  tags = merge(var.tags, {
    Name = "${local.name_prefix}-public-subnet-1a"
    Type = "Public"
  })
}

# Private Subnet in us-east-1a
resource "aws_subnet" "private_1a" {
  vpc_id            = aws_vpc.keubernetes_vpc.id
  cidr_block        = "10.0.2.0/24"
  availability_zone = "us-east-1a"

  tags = merge(var.tags, {
    Name = "${local.name_prefix}-private-subnet-1a"
    Type = "Private"
  })
}

# Public Subnet in us-east-1b
resource "aws_subnet" "public_1b" {
  vpc_id                  = aws_vpc.keubernetes_vpc.id
  cidr_block              = "10.0.3.0/24"
  availability_zone       = "us-east-1b"
  map_public_ip_on_launch = true

  tags = merge(var.tags, {
    Name = "${local.name_prefix}-public-subnet-1b"
    Type = "Public"
  })
}

# Private Subnet in us-east-1b
resource "aws_subnet" "private_1b" {
  vpc_id            = aws_vpc.keubernetes_vpc.id
  cidr_block        = "10.0.4.0/24"
  availability_zone = "us-east-1b"

  tags = merge(var.tags, {
    Name = "${local.name_prefix}-private-subnet-1b"
    Type = "Private"
  })
}

# Elastic IP for NAT Gateway in us-east-1a
resource "aws_eip" "eip_nat_1a" {
  domain = "vpc"

  tags = merge(var.tags, {
    Name = "${local.name_prefix}-nat-eip-1a"
  })
}

# Elastic IP for NAT Gateway in us-east-1b
resource "aws_eip" "eip_nat_1b" {
  domain = "vpc"

  tags = merge(var.tags, {
    Name = "${local.name_prefix}-nat-eip-1b"
  })
}

# NAT Gateway in us-east-1a (public subnet)
resource "aws_nat_gateway" "nat_1a" {
  allocation_id = aws_eip.eip_nat_1a.id
  subnet_id     = aws_subnet.public_1a.id

  tags = merge(var.tags, {
    Name = "${local.name_prefix}-nat-gateway-1a"
  })
}

# NAT Gateway in us-east-1b (public subnet)
resource "aws_nat_gateway" "nat_1b" {
  allocation_id = aws_eip.eip_nat_1b.id
  subnet_id     = aws_subnet.public_1b.id

  tags = merge(var.tags, {
    Name = "${local.name_prefix}-nat-gateway-1b"
  })
}

# Internet Gateway
resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.keubernetes_vpc.id

  tags = merge(var.tags, {
    Name = "${local.name_prefix}-igw"
  })
}

# Route Table for Public Subnets
resource "aws_route_table" "public" {
  vpc_id = aws_vpc.keubernetes_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }

  tags = merge(var.tags, {
    Name = "${local.name_prefix}-public-rt"
  })
}

# Route Table Association for Public Subnet 1a
resource "aws_route_table_association" "public_1a" {
  subnet_id      = aws_subnet.public_1a.id
  route_table_id = aws_route_table.public.id
}

# Route Table Association for Public Subnet 1b
resource "aws_route_table_association" "public_1b" {
  subnet_id      = aws_subnet.public_1b.id
  route_table_id = aws_route_table.public.id
}

# Route Table for Private Subnet 1a
resource "aws_route_table" "private_1a" {
  vpc_id = aws_vpc.keubernetes_vpc.id

  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.nat_1a.id
  }

  tags = merge(var.tags, {
    Name = "${local.name_prefix}-private-rt-1a"
  })
}

# Route Table for Private Subnet 1b
resource "aws_route_table" "private_1b" {
  vpc_id = aws_vpc.keubernetes_vpc.id

  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.nat_1b.id
  }

  tags = merge(var.tags, {
    Name = "${local.name_prefix}-private-rt-1b"
  })
}

# Route Table Association for Private Subnet 1a
resource "aws_route_table_association" "private_1a" {
  subnet_id      = aws_subnet.private_1a.id
  route_table_id = aws_route_table.private_1a.id
}

# Route Table Association for Private Subnet 1b
resource "aws_route_table_association" "private_1b" {
  subnet_id      = aws_subnet.private_1b.id
  route_table_id = aws_route_table.private_1b.id
}

# Data source for latest Amazon Linux 2 AMI
data "aws_ami" "amazon_linux" {
  most_recent = true
  owners      = ["amazon"]

  filter {
    name   = "name"
    values = ["amzn2-ami-hvm-*-x86_64-gp2"]
  }
}

# Security Group for Bastion Host
resource "aws_security_group" "bastion" {
  name        = "${local.name_prefix}-bastion-sg"
  description = "Security group for bastion host"
  vpc_id      = aws_vpc.keubernetes_vpc.id

  ingress {
    description = "SSH"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = merge(var.tags, {
    Name = "${local.name_prefix}-bastion-sg"
  })
}

# Security Group for Private EC2 instances
resource "aws_security_group" "private_ec2" {
  name        = "${local.name_prefix}-private-ec2-sg"
  description = "Security group for private EC2 instances"
  vpc_id      = aws_vpc.keubernetes_vpc.id

  ingress {
    description     = "SSH from Bastion"
    from_port       = 22
    to_port         = 22
    protocol        = "tcp"
    security_groups = [aws_security_group.bastion.id]
  }

  ingress {
    description = "All traffic from VPC"
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = [var.vpc_cidr]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = merge(var.tags, {
    Name = "${local.name_prefix}-private-ec2-sg"
  })
}

# Bastion Host in Public Subnet 1a
resource "aws_instance" "bastion" {
  ami                    = data.aws_ami.amazon_linux.id
  instance_type          = "t3.small"
  subnet_id              = aws_subnet.public_1a.id
  vpc_security_group_ids = [aws_security_group.bastion.id]
  key_name               = var.key_pair_name

  tags = merge(var.tags, {
    Name = "${local.name_prefix}-bastion-host"
    Type = "Bastion"
  })
}

# Private EC2 instances in AZ 1a
resource "aws_instance" "private_1a" {
  count                  = 3
  ami                    = data.aws_ami.amazon_linux.id
  instance_type          = "t3.small"
  subnet_id              = aws_subnet.private_1a.id
  vpc_security_group_ids = [aws_security_group.private_ec2.id]
  key_name               = var.key_pair_name

  tags = merge(var.tags, {
    Name = "${local.name_prefix}-private-1a-${count.index + 1}"
    Type = "Private"
    AZ   = "us-east-1a"
  })
}

# Private EC2 instances in AZ 1b
resource "aws_instance" "private_1b" {
  count                  = 3
  ami                    = data.aws_ami.amazon_linux.id
  instance_type          = "t3.small"
  subnet_id              = aws_subnet.private_1b.id
  vpc_security_group_ids = [aws_security_group.private_ec2.id]
  key_name               = var.key_pair_name

  tags = merge(var.tags, {
    Name = "${local.name_prefix}-private-1b-${count.index + 1}"
    Type = "Private"
    AZ   = "us-east-1b"
  })
}
